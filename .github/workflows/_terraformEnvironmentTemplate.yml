name: Terraform Environment Template

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        default: "dev"
        description: "Specifies the environment of the deployment."
      working_directory:
        required: true
        type: string
        description: "Specifies the working directory."
      subscription_id:
        required: true
        type: string
        description: "Specifies the Azure subscription id."
      terraform_version:
        required: true
        type: string
        description: "Specifies the terraform version."
      export_terraform_outputs:
        required: false
        type: boolean
        default: false
        description: "Specifies whether terraform outputs should be exported."
    secrets:
      TENANT_ID:
        required: true
        description: "Specifies the tenant id of the deployment."
      CLIENT_ID:
        required: true
        description: "Specifies the client id."
      CLIENT_SECRET:
        required: true
        description: "Specifies the client secret."
    outputs:
      test:
        description: "A sample value."
        value: ${{ jobs.apply.outputs.test }}

jobs:
  lint:
    name: Terraform Lint
    runs-on: [ubuntu-latest]
    continue-on-error: false
    needs: []

    steps:
      # Setup Terraform
      - name: Setup Terraform
        id: terraform_setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: true

      # Check Out Repository
      - name: Check Out Repository
        id: checkout_repository
        uses: actions/checkout@v4

      # Terraform Format
      - name: Terraform Format
        id: terraform_format
        working-directory: ${{ inputs.working_directory }}
        run: |
          terraform fmt -check -recursive

  plan:
    name: Terraform Plan
    runs-on: [self-hosted]
    continue-on-error: false
    environment: ${{ inputs.environment }}
    needs: [lint]

    env:
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ inputs.subscription_id }}
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_USE_OIDC: false

    steps:
      # Setup Node
      - name: Setup Node
        id: node_setup
        uses: actions/setup-node@v4
        with:
          node-version: 16

      # Setup Terraform
      - name: Setup Terraform
        id: terraform_setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: true

      # Check Out Repository
      - name: Check Out Repository
        id: checkout_repository
        uses: actions/checkout@v4

      # Terraform Init
      - name: Terraform Init
        id: terraform_init
        working-directory: ${{ inputs.working_directory }}
        run: |
          terraform init

      # Terraform Validate
      - name: Terraform Validate
        id: terraform_validate
        working-directory: ${{ inputs.working_directory }}
        run: |
          terraform validate

      # Terraform Plan
      - name: Terraform Plan
        id: terraform_plan
        working-directory: ${{ inputs.working_directory }}
        run: |
          terraform plan -var-file vars.${{ inputs.environment }}.tfvars -input=false

  apply:
    name: Terraform Apply
    runs-on: [self-hosted]
    continue-on-error: false
    environment: ${{ inputs.environment }}
    # if: github.event_name == 'push' || github.event_name == 'release'
    needs: [lint, plan]
    outputs:
      test: ${{ steps.terraform_outputs.outputs.test }}

    env:
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ inputs.subscription_id }}
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_USE_OIDC: false

    steps:
      # Setup Node
      - name: Setup Node
        id: node_setup
        uses: actions/setup-node@v4
        with:
          node-version: 16

      # Setup Terraform
      - name: Setup Terraform
        id: terraform_setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: true

      # Check Out Repository
      - name: Check Out Repository
        id: checkout_repository
        uses: actions/checkout@v4

      # Login to Azure
      - name: Azure Login
        id: azure_login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ inputs.subscription_id }}","tenantId":"${{ secrets.TENANT_ID }}"}'

      # Terraform Init
      - name: Terraform Init
        working-directory: ${{ inputs.working_directory }}
        run: |
          terraform init

      # Terraform Apply
      - name: Terraform Apply
        working-directory: ${{ inputs.working_directory }}
        run: |
          terraform apply -var-file vars.${{ inputs.environment }}.tfvars -auto-approve -input=false

      # Terraform Export Outputs
      - name: Terraform Export Outputs
        id: terraform_outputs
        working-directory: ${{ inputs.working_directory }}
        if: inputs.export_terraform_outputs
        run: |
          test=$(terraform output -raw test)
          echo "test=$test" >> "$GITHUB_OUTPUT"

      # Log out from Azure
      - name: Log out from Azure
        id: azure_logout
        run: |
          az logout
